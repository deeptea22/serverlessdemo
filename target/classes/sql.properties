SELECT_FROM_ADMINS_ON_TYPE=SELECT a.*, i.institution_name FROM admins a, institution i WHERE a.type = ? AND a.delete_marker != 'Y' AND a.institution_id = i.institution_id ORDER BY a.created_timestamp desc
SELECT_FROM_ADMINS_ON_ADMIN_ID=SELECT a.*, i.institution_name FROM admins a, institution i WHERE a.admin_id = ? AND a.delete_marker != 'Y' AND a.institution_id = i.institution_id
SELECT_FROM_ADMINS_ON_EMAIL_ID=SELECT a.*, i.institution_name FROM admins a, institution i WHERE a.email_id = ? AND a.delete_marker != 'Y' AND a.institution_id = i.institution_id
SELECT_FROM_ADMINS_ON_INSTITUTION_ID=SELECT a.*, i.institution_name FROM admins a, institution i WHERE a.institution_id = ? AND a.delete_marker != 'Y' AND a.institution_id = i.institution_id
SELECT_PWD_EXPIRY_INFO_FROM_ADMINS_TO_SENT_EMAIL=SELECT t.* FROM (SELECT temp.*, CASE WHEN temp.pwd_expire_in_days = -1 THEN "No" WHEN CURDATE() >= temp.pwd_expiry_notification_start_date THEN "Yes" ELSE "No" END AS show_notification, CASE WHEN temp.pwd_expire_in_days = -1 THEN "No" WHEN CURDATE() > temp.pwd_expiry_date THEN "Yes" ELSE "No" END AS pwd_expired, DATEDIFF(temp.pwd_expiry_date, CURDATE()) days_left_in_pwd_expiration FROM (SELECT a.email_id, a.first_name, a.last_name, a.pwd_updated_date, a.is_tnc_accepted, i.pwd_expire_in_days, i.pwd_expiry_notification_start_in_days, DATE_ADD(a.pwd_updated_date, INTERVAL i.pwd_expire_in_days-1 DAY) as pwd_expiry_date, DATE_ADD(a.pwd_updated_date, INTERVAL i.pwd_expire_in_days-i.pwd_expiry_notification_start_in_days DAY) as pwd_expiry_notification_start_date FROM admins a, institution i WHERE a.institution_id = i.institution_id) as temp) as t WHERE t.show_notification = 'Yes' AND t.pwd_expired = 'No'
SELECT_FROM_INSTITUTION=SELECT * FROM institution i WHERE i.delete_marker != 'Y' AND i.institution_id != 0 ORDER BY i.created_timestamp desc
SELECT_FROM_INSTITUTION_BY_INSTITUTION_NAME=SELECT * FROM institution i WHERE i.institution_name = ? AND i.delete_marker != 'Y'
SELECT_ALL_ACTIVATED_INSTITUTION_FROM_INSTITUTION=SELECT * FROM institution i WHERE i.institution_status = 'A' AND i.delete_marker != 'Y' AND i.institution_id != 0
SELECT_INSTITUTION_ITS_PWD_POLICY_ITS_DATA_ARCHIVAL_POLICY_AND_ITS_TNC_BY_INSTITUTION_ID=SELECT i.*, ppm.pwd_policy_id, ppm.pwd_rotation_in_days, ppm.pwd_min_length, ppm.pwd_max_length, ppm.is_caps_allowed, ppm.is_lower_allowed, ppm.is_numeric_allowed, ppm.is_spl_char_allowed, ppm.retry_login_attempts_allowed, ppm.pwd_history, ppm.prohibited_passwords, ppm.pwd_policy_status, ppm.delete_marker AS pwd_policy_delete_marker, ppm.created_by AS pwd_policy_created_by, ppm.created_timestamp AS pwd_policy_created_timestamp, ppm.updated_by AS pwd_policy_updated_by, ppm.updated_timestamp AS pwd_policy_updated_timestamp, tnc.tnc_id, tnc.created_by AS tnc_created_by, tnc.created_timestamp AS tnc_created_timestamp, tnc.updated_by AS tnc_updated_by, tnc.updated_timestamp AS tnc_updated_timestamp, tnc.tnc_status, tnc.delete_marker AS tnc_delete_marker, tnc.tnc_text, dapm.data_archival_policy_id, dapm.archival_period_in_months, dapm.auto_archival_frequency, dapm.auto_log_off_time_in_minutes, dapm.duration_to_store_audit_logs_in_months, dapm.data_archival_policy_status, dapm.delete_marker AS data_archival_policy_delete_marker, dapm.created_by AS data_archival_policy_created_by, dapm.created_timestamp AS data_archival_policy_created_timestamp, dapm.updated_by AS data_archival_policy_updated_by, dapm.updated_timestamp AS data_archival_policy_updated_timestamp FROM institution i LEFT JOIN pwd_policy_mgmt ppm ON (ppm.institution_id = i.institution_id AND ppm.pwd_policy_status = 'A' AND ppm.delete_marker != 'Y') LEFT JOIN terms_n_conditions tnc ON (tnc.institution_id = 0 AND tnc.tnc_status = 'A' AND tnc.delete_marker != 'Y') LEFT JOIN data_archival_policy_mgmt dapm ON (dapm.institution_id = i.institution_id AND dapm.data_archival_policy_status = 'A' AND dapm.delete_marker != 'Y') WHERE i.institution_id = ? AND i.delete_marker != 'Y'
SELECT_MAXIMUM_DETAILS_FROM_ADMINS_AND_OTHER_TABLES_ON_EMAIL_ID=SELECT temp.*, CASE WHEN temp.pwd_expire_in_days = -1 THEN "No" WHEN CURDATE() >= temp.pwd_expiry_notification_start_date THEN "Yes" ELSE "No" END AS show_notification, CASE WHEN temp.pwd_expire_in_days = -1 THEN "No" WHEN CURDATE() > temp.pwd_expiry_date THEN "Yes" ELSE "No" END AS pwd_expired, DATEDIFF(temp.pwd_expiry_date, CURDATE()) days_left_in_pwd_expiration, ppm.pwd_policy_id, ppm.pwd_rotation_in_days, ppm.pwd_min_length, ppm.pwd_max_length, ppm.is_caps_allowed, ppm.is_lower_allowed, ppm.is_numeric_allowed, ppm.is_spl_char_allowed, ppm.retry_login_attempts_allowed, ppm.pwd_history, ppm.prohibited_passwords, ppm.pwd_policy_status, ppm.delete_marker AS pwd_policy_delete_marker, ppm.created_by AS pwd_policy_created_by, ppm.created_timestamp AS pwd_policy_created_timestamp, ppm.updated_by AS pwd_policy_updated_by, ppm.updated_timestamp AS pwd_policy_updated_timestamp, tnc.tnc_id, tnc.created_by AS tnc_created_by, tnc.created_timestamp AS tnc_created_timestamp, tnc.updated_by AS tnc_updated_by, tnc.updated_timestamp AS tnc_updated_timestamp, tnc.tnc_status, tnc.delete_marker AS tnc_delete_marker, tnc.tnc_text, dapm.data_archival_policy_id, dapm.archival_period_in_months, dapm.auto_archival_frequency, dapm.auto_log_off_time_in_minutes, dapm.duration_to_store_audit_logs_in_months, dapm.data_archival_policy_status, dapm.delete_marker AS data_archival_policy_delete_marker, dapm.created_by AS data_archival_policy_created_by, dapm.created_timestamp AS data_archival_policy_created_timestamp, dapm.updated_by AS data_archival_policy_updated_by, dapm.updated_timestamp AS data_archival_policy_updated_timestamp FROM (SELECT a.admin_id, a.email_id, a.first_name, a.last_name, a.employee_id, a.pool_id, a.`status`, a.`type`, a.portal_access, a.location, a.delete_marker, a.is_tnc_accepted, a.pwd_updated_date, a.last_login_timestamp, a.locale, a.timezone, a.created_by, a.created_timestamp, a.updated_by, a.updated_timestamp, i.institution_id, i.institution_name, i.address, i.pwd_expire_in_days, i.pwd_expiry_notification_start_in_days, DATE_ADD(a.pwd_updated_date, INTERVAL i.pwd_expire_in_days-1 DAY) AS pwd_expiry_date, DATE_ADD(a.pwd_updated_date, INTERVAL i.pwd_expire_in_days-i.pwd_expiry_notification_start_in_days DAY) AS pwd_expiry_notification_start_date FROM admins a, institution i WHERE a.email_id = ? AND a.delete_marker != 'Y' AND a.institution_id = i.institution_id AND i.delete_marker != 'Y') AS temp LEFT JOIN pwd_policy_mgmt ppm ON (temp.institution_id = ppm.institution_id AND ppm.pwd_policy_status = 'A' AND ppm.delete_marker != 'Y') LEFT JOIN terms_n_conditions tnc ON (tnc.institution_id = 0 AND tnc.tnc_status = 'A' AND tnc.delete_marker != 'Y') LEFT JOIN data_archival_policy_mgmt dapm ON (temp.institution_id = dapm.institution_id AND dapm.data_archival_policy_status = 'A' AND dapm.delete_marker != 'Y')
SELECT_FROM_PWD_POICY_MGMT_BY_INSTITUTION_ID=SELECT * FROM pwd_policy_mgmt ppm WHERE ppm.institution_id = ?
SELECT_FROM_DATA_ARCHIVAL_POICY_MGMT_BY_INSTITUTION_ID=SELECT * FROM data_archival_policy_mgmt dapm WHERE dapm.institution_id = ?
SELECT_FROM_HELP_CENTER=SELECT * FROM help_center
SELECT_FROM_HELP_CENTER_MASTER=SELECT hcm.master_id ,hcm.subject FROM help_center_master hcm
SELECT_FROM_AUDIT_LOGS_FOR_SUPER_ADMIN_ONLY_BY_DATE_FILTER=SELECT * FROM audit_logs al WHERE DATE(al.created_timestamp) >= ? AND DATE(al.created_timestamp) <= ? AND al.user_type = 'SA'
SELECT_FROM_AUDIT_LOGS_BASED_ON_INSTITUTION_ID_AND_DATE_FILTER=SELECT * FROM audit_logs al WHERE al.institution_id = ? AND DATE(al.created_timestamp) >= ? AND DATE(al.created_timestamp) <= ?
SELECT_FROM_AUDIT_LOGS_BY_DATE_FILTER=SELECT * FROM audit_logs al WHERE DATE(al.created_timestamp) >= ? AND DATE(al.created_timestamp) <= ?
SELECT_FROM_DEVICE_DATA_FOR_BASELINE_STATUS=SELECT dd.measurement_id FROM device_data dd WHERE dd.chf_patient_id = (select chf_patient_id from patient_phi where patient_id = ?) AND dd.is_baseline_reading = TRUE
SELECT_LATEST_TIMESTAMPS_FROM_DEVICE_DATA=SELECT(SELECT MAX(reading_date)  FROM device_data WHERE is_baseline_reading= TRUE AND status = 'A' AND chf_patient_id = ?) AS baseline_latest_timeStamp,(SELECT MAX(reading_date)  FROM device_data WHERE is_baseline_reading= FALSE AND status = 'A' AND chf_patient_id = ?) AS normal_latest_timeStamp,(SELECT MAX(reading_date) From device_data WHERE is_baseline_reading= FALSE AND status = 'A' AND chf_patient_id = ? AND reading_date < (SELECT MAX(reading_date) FROM device_data WHERE is_baseline_reading= FALSE AND status = 'A' AND chf_patient_id = ?)) AS second_normal_latest_timeStamp
SELECT_FROM_DEVICE_DATA_ON_PATIENT_ID=SELECT dd.pk_id, dd.status, dd.measurement_id, dd.reading_date, dd.is_baseline_reading, CASE WHEN dd.is_baseline_reading = TRUE AND dd.reading_date = ? THEN JSON_UNQUOTE(JSON_EXTRACT(drvd.derived_data, '$.postProcessorFiles.s3SoundFile')) WHEN dd.is_baseline_reading = FALSE AND dd.reading_date = ? THEN JSON_UNQUOTE(JSON_EXTRACT(drvd.derived_data, '$.postProcessorFiles.s3SoundFile')) WHEN dd.is_baseline_reading = FALSE AND dd.reading_date = ? THEN JSON_UNQUOTE(JSON_EXTRACT(drvd.derived_data, '$.postProcessorFiles.s3SoundFile')) END AS heart_sound_url, CASE WHEN ad.is_active = TRUE THEN ad.severity END AS severity FROM device_data dd LEFT JOIN threshold_breach_data ad ON ad.measurement_id = dd.measurement_id LEFT JOIN derived_data drvd ON drvd.measurement_id = dd.measurement_id WHERE dd.chf_patient_id = ?  ORDER BY dd.reading_date DESC LIMIT ?,?
SELECT_FROM_THRESHOLD_POLICY_BY_INSTITUTION_ID=SELECT tp.* FROM threshold_policy tp WHERE tp.institution_id =?
SELECT_ECG_FROM_DERIVED_DATA_ON_PATIENT_ID=SELECT  dd.pk_id, dd.status, dd.reading_date, dd.is_baseline_reading, JSON_UNQUOTE(JSON_EXTRACT(drvd.derived_data, '$.postProcessorFiles.ecg'))  AS ecg_url FROM device_data dd LEFT JOIN derived_data drvd ON drvd.measurement_id = dd.measurement_id WHERE dd.reading_date IN (?,?,?) ORDER BY dd.reading_date DESC 
COUNT_NO_OF_READINGS_AVAILABLE_BASED_ON_PATIENT_ID=SELECT COUNT(dd.reading_date) AS readings_count FROM device_data dd WHERE dd.chf_patient_id = ?
SELECT_DATA_ON_DEVICE_DATA_BASED_ON_PACKET_ID=SELECT JSON_UNQUOTE(JSON_EXTRACT(drvd.derived_data, '$.postProcessorFiles.s3SoundFile')) AS  heart_sound_url,  JSON_UNQUOTE(JSON_EXTRACT(drvd.derived_data, '$.postProcessorFiles.ecg')) AS ecg_url FROM device_data dd LEFT JOIN derived_data drvd ON drvd.measurement_id = dd.measurement_id WHERE dd.pk_id = ?
SELECT_FROM_PATIENT_THRESHOLD_ON_PATIENT_ID=SELECT pt.threshold_id, pt.patient_id, pt.threshold_values FROM patient_threshold pt WHERE pt.patient_id =?
SELECT_CHF_PATIENT_ID_FROM_PATIENT_PHI=Select chf_patient_id from patient_phi where patient_id = ?
SELECT_FROM_CLINICIAN_ON_EMAIL_ID=SELECT c.* FROM clinician c WHERE c.email_id = ? AND c.delete_marker != 'Y'
SELECT_FROM_PATIENT_VITALS_ON_PATIENT_ID=SELECT pv.* FROM patient_vitals pv WHERE pv.patient_id = ?
SELECT_FROM_PATIENT_PHI_BASED_ON_INSTITUTION_ID = SELECT pp.patient_id, pp.chf_patient_id, pp.mr_no, pp.gender, pp.first_name, pp.last_name, pp.contact_no, pp.dob FROM patient_phi pp WHERE pp.institution_id = ? and delete_marker='N' LIMIT ?, ?
SELECT_FROM_PATIENT_PROVIDER_MAPPING_ON_CHF_PATIENT_ID=SELECT ppm.chf_patient_id, ppm.patient_provider_mapping_id, ppm.provider_id, ppm.is_default, hp.provider_name, hp.hospital_affilation, hp.doctor_name, hp.doctor_contact_no, hp.doctor_email, hp.other_contact_number, hp.institution_id FROM patient_provider_mapping ppm Right JOIN healthcare_provider hp ON ppm.provider_id = hp.provider_id WHERE ppm.chf_patient_id = ? AND ppm.delete_marker = 'N'
SELECT_PATIENT_CLINICIAN_WATCHLIST_STATUS=SELECT * FROM patient_clinician_mapping pcm WHERE pcm.patient_id = ? AND pcm.clinician_id = ?
SELECT_FROM_PATIENT_PHI_BASED_ON_CHF_PATIENT_ID=SELECT t.*, di.device_label_id, di.wearable_fw_version FROM (SELECT pp.*, pdm.kit_id, pdm.system_id FROM patient_phi pp Left join patient_device_mapping pdm ON pdm.chf_patient_id = pp.chf_patient_id WHERE pp.chf_patient_id = ? ) AS t LEFT JOIN device_inventory di ON di.kit_id = t.kit_id
SELECT_FROM_CHF_PATIENT_ID_POLICY_BY_INSTITUTION_ID=SELECT cpip.institution_id, cpip.is_emr_ehr_enabled, cpip.label, cpip.label_rule, cpip.label_separator, cpip.label_sequence FROM chf_patient_id_policy cpip WHERE cpip.institution_id = ? ORDER BY cpip.label_sequence
SELECT_KIT_ID_FROM_DEVICE_INVENTORY=SELECT kit_id FROM device_inventory WHERE device_label_id = ?
SELECT_SYSTEM_ID_FROM_PATIENT_DEVICE_MAPPING=SELECT system_id FROM patient_device_mapping WHERE kit_id = ? AND chf_patient_id = ?
SELECT_FROM_CLINICIAN_ON_EMAIL_ID=SELECT c.* FROM clinician c WHERE c.email_id = ? AND c.delete_marker != 'Y'
SELECT_FROM_CLINICIAN_ON_INSTITUTION_ID=SELECT c.* FROM clinician c WHERE c.institution_id = ? AND c.delete_marker != 'Y'
SELECT_CLINICIAN_AND_ITS_PWD_EXPIRY_INFO_BY_EMAIL_ID_AND_INSTITUTION_SPECIFIC_PARAMETERS=SELECT temp.*, CASE WHEN ? = -1 THEN "No" WHEN CURDATE() >= temp.pwd_expiry_notification_start_date THEN "Yes" ELSE "No" END AS show_notification, CASE WHEN ? = -1 THEN "No" WHEN CURDATE() > temp.pwd_expiry_date THEN "Yes" ELSE "No" END AS pwd_expired, DATEDIFF(temp.pwd_expiry_date, CURDATE()) AS days_left_in_pwd_expiration FROM (SELECT c.*, DATE_ADD(c.pwd_updated_date, INTERVAL ?-1 DAY) AS pwd_expiry_date, DATE_ADD(c.pwd_updated_date, INTERVAL ?-? DAY) AS pwd_expiry_notification_start_date FROM clinician c WHERE c.email_id = ?) AS temp
SELECT_PWD_EXPIRY_INFO_FROM_CLINICIAN_TO_SENT_EMAIL=SELECT t.* FROM (SELECT temp.*, CASE WHEN temp.pwd_expire_in_days = -1 THEN "No" WHEN CURDATE() >= temp.pwd_expiry_notification_start_date THEN "Yes" ELSE "No" END AS show_notification, CASE WHEN temp.pwd_expire_in_days = -1 THEN "No" WHEN CURDATE() > temp.pwd_expiry_date THEN "Yes" ELSE "No" END AS pwd_expired, DATEDIFF(temp.pwd_expiry_date, CURDATE()) days_left_in_pwd_expiration FROM (SELECT c.email_id, c.first_name, c.last_name, c.pwd_updated_date, c.is_tnc_accepted, i.pwd_expire_in_days, i.pwd_expiry_notification_start_in_days, DATE_ADD(c.pwd_updated_date, INTERVAL i.pwd_expire_in_days-1 DAY) as pwd_expiry_date, DATE_ADD(c.pwd_updated_date, INTERVAL i.pwd_expire_in_days-i.pwd_expiry_notification_start_in_days DAY) as pwd_expiry_notification_start_date FROM clinician c, institution i WHERE c.institution_id = i.institution_id) as temp) as t WHERE t.show_notification = 'Yes' AND t.pwd_expired = 'No'
SELECT_FROM_AUDIT_LOGS_BASED_ON_INSTITUTION_ID_AND_DATE_FILTER=SELECT * FROM audit_logs al WHERE al.institution_id = ? AND DATE(al.created_timestamp) >= ? AND DATE(al.created_timestamp) <= ?
SELECT_DERIVED_DATA_BY_PATIENT_ID_AND_DATE_FILTER=SELECT alertd.alert_data_id, alertd.msg, alertd.msg_id, alertd.severity,alertd.breach_param, alertd.breach_text, alertd.is_active, device.reading_date, device.is_baseline_reading, derived.supine_tidal_vol, derived.supine_respiration_rate, derived.supine_rr_tv, derived.fowler_tidal_vol, derived.fowler_respiration_rate, derived.fowler_rr_tv, derived.delta_z, derived.s3_energy, derived.thoracic_impedance, derived.heart_rate FROM derived_data derived inner join device_data device on  derived.msg_id = device.msg_id left join alert_data_new alertd on alertd.msg_id = device.msg_id AND alertd.is_active = true WHERE device.patient_id = ? AND DATE(device.reading_date) >= ? AND DATE(device.reading_date) <= ? ORDER BY device.reading_date
SELECT_DERIVED_DATA_BY_PATIENT_ID=SELECT alertd.alert_data_id, alertd.msg, alertd.msg_id, alertd.severity,alertd.breach_param, alertd.breach_text, alertd.is_active, device.reading_date, device.is_baseline_reading, derived.supine_tidal_vol, derived.supine_respiration_rate, derived.supine_rr_tv, derived.fowler_tidal_vol, derived.fowler_respiration_rate, derived.fowler_rr_tv, derived.delta_z, derived.s3_energy, derived.thoracic_impedance, derived.heart_rate FROM derived_data derived inner join device_data device on  derived.msg_id = device.msg_id left join alert_data_new alertd on alertd.msg_id = device.msg_id AND alertd.is_active = true WHERE device.patient_id = ? ORDER BY device.reading_date
SELECT_CLINICIANS_LIST_TO_UNBLOCK=SELECT c.* FROM clinician c WHERE (c.updated_timestamp <= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 HOUR) AND c.status = 'LI')
SELECT_CPM_TRENDS=SELECT dd.patient_id as patient_id, dd.institution_id as institution_id, dd.reading_date as lastread, drd.heart_rate as heart_rate, drd.heart_rate_trend as heart_rate_trend, drd.supine_respiration_rate as respiration_rate, drd.supine_respiration_rate_trend as respiration_rate_trend, drd.s3_trend as s3_trend, drd.tidal_vol_trend as tidal_vol_trend,drd.thoracic_impedance_trend as thoracic_impedance_trend, drd.reading_compliance as reading_compliance, pp.is_threshold_set as threshold_alarm, dd.msg_id as msg_id from device_data dd inner join ( select msg_id, max(reading_date) as MaxDate from device_data group by patient_id ) dds on dd.msg_id = dds.msg_id inner join derived_data drd on dd.msg_id=drd.msg_id left join patient_phi pp on pp.patient_id=dd.patient_id where pp.patient_id = ?


INSERT_INTO_ADMINS=INSERT INTO admins(institution_id,email_id,first_name,last_name,employee_id,pool_id,type,is_default,created_by,updated_by,pwd_updated_date) VALUES(?,?,?,?,?,?,?,?,?,?,CURDATE())
INSERT_INTO_INSTITUTION=INSERT INTO institution(institution_name,address,contact_person,contact_number,created_by,updated_by) VALUES(?,?,?,?,?,?)
INSERT_INTO_PWD_POLICY_MGMT=INSERT INTO pwd_policy_mgmt(institution_id,created_by,updated_by,pwd_rotation_in_days,pwd_min_length,pwd_max_length,is_caps_allowed,is_lower_allowed,is_numeric_allowed,is_spl_char_allowed,retry_login_attempts_allowed,pwd_history,prohibited_passwords,pwd_policy_status,delete_marker) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
INSERT_INTO_DATA_ARCHIVAL_POLICY_MGMT=INSERT INTO data_archival_policy_mgmt(institution_id,created_by,updated_by,archival_period_in_months,auto_archival_frequency,auto_log_off_time_in_minutes,duration_to_store_audit_logs_in_months,data_archival_policy_status,delete_marker) VALUES(?,?,?,?,?,?,?,?,?)
INSERT_INTO_CONTACT_US=INSERT INTO contact_us(requester_name,from_email,to_email,cc_email,subject,message,is_copy_requested,ses_msg_id,created_by,updated_by) VALUES(?,?,?,?,?,?,?,?,?,?)
INSERT_INTO_AUDIT_LOGS=INSERT INTO audit_logs(institution_id,user_type,activity,created_by) VALUES(?,?,?,?)
INSERT_INTO_PATIENT_VITALS=INSERT INTO patient_vitals(patient_id,reading_date,systolic_bp,diastolic_bp,weight,temperature,custom_vitals,created_by,updated_by) VALUES(?,?,?,?,?,?,?,?,?)
INSERT_INTO_PATIENT_PHI=INSERT INTO patient_phi(chf_patient_id,institution_id,mr_no,patient_details_json,created_by,updated_by,first_name,last_name,gender,contact_no,dob,address,zip,ssn) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)
INSERT_INTO_PATIENT_PROVIDER_MAPPING=INSERT INTO patient_provider_mapping (provider_id, chf_patient_id, is_default, created_by, updated_by) VALUES (?,?,?,?,?)
INSERT_INTO_THRESHOLD_POLICY=INSERT INTO threshold_policy (institution_id, threshold_policy, created_by, updated_by) VALUES (?,?,?,?)
INSERT_INTO_PATIENT_PROVIDER=INSERT INTO healthcare_provider (institution_id, provider_name, hospital_affilation, doctor_name, doctor_contact_no, doctor_email, other_contact_number, created_by) VALUES (?, ?, ?, ?, ?,?, ?,?);
INSERT_INTO_PATIENT_THRESHOLD=INSERT INTO patient_threshold (patient_id,threshold_values,created_by,updated_by) VALUES (?,?,?,?)
INSERT_INTO_PATIENT_DEVICE_MAPPING=INSERT INTO patient_device_mapping(kit_id,chf_patient_id,system_id,created_by,updated_by) VALUES(?,?,?,?,?)
INSERT_INTO_CHF_PATIENT_ID_POLICY=INSERT INTO chf_patient_id_policy(institution_id,is_emr_ehr_enabled,label,label_rule,label_separator,label_sequence,created_by) VALUES(?,?,?,?,?,?,?)
INSERT_INTO_CLINICIAN=INSERT INTO clinician(institution_id,email_id,first_name,last_name,employee_id,pool_id,type,portal_access,created_by,updated_by,pwd_updated_date) VALUES(?,?,?,?,?,?,?,?,?,?,CURDATE())
ADD_PATIENT_CLINICIAN_MAPPING=INSERT INTO patient_clinician_mapping(patient_id,clinician_id,created_by,updated_by) VALUES(?,?,?,?)
DELETE_PATIENT_CLINICIAN_MAPPING=DELETE FROM patient_clinician_mapping WHERE patient_id = ? AND clinician_id = ?

ACTIVATE_ADMIN_ON_ADMIN_ID=UPDATE admins a SET a.institution_id = ?, a.first_name = ?, a.last_name = ?,  a.employee_id = ?, a.pool_id = ?, a.status = ?, a.type = ?, a.is_default = ?, a.portal_access = ?, a.location = ?, a.delete_marker = ?, a.retry_login_attempt_counter = 0, a.updated_by = ? WHERE a.admin_id = ?
ACTIVATE_CLINICIAN_ON_CLINICIAN_ID=UPDATE clinician c SET c.institution_id = ?, c.first_name = ?, c.last_name = ?, c.employee_id = ?, c.pool_id = ?, c.status = ?, c.type = ?, c.portal_access = ?, c.location = ?, c.delete_marker = ?, c.retry_login_attempt_counter = 0, c.updated_by = ? WHERE c.clinician_id = ?

UPDATE_ADMIN_ON_ID=UPDATE admins a SET a.institution_id = ?, a.first_name = ?, a.last_name = ?, a.employee_id = ?, a.pool_id = ?, a.status = ?, a.type = ?, a.is_default = ?, a.portal_access = ?, a.location = ?, a.delete_marker = ?, a.updated_by = ? WHERE a.admin_id = ?
UPDATE_ADMIN_PROFILE_ON_EMAIL_ID=UPDATE admins a SET a.first_name = ?, a.last_name = ?, a.locale = ?, a.timezone = ?, a.updated_by = ? WHERE a.email_id = ?
DEACTIVATE_ADMIN_ON_INSTITUTION_ID=UPDATE admins a SET a.status = 'II', a.updated_by = ? WHERE a.institution_id = ? AND a.status = 'A'
ACTIVATE_ADMIN_ON_INSTITUTION_ID=UPDATE admins a SET a.status = 'A', a.retry_login_attempt_counter = 0, a.updated_by = ? WHERE a.institution_id = ? AND a.status = 'II'
DELETE_ADMIN_ON_INSTITUTION_ID=UPDATE admins a SET a.delete_marker = 'Y', a.updated_by = ? WHERE a.institution_id = ?
UPDATE_INSTITUTION_ON_ID=UPDATE institution i SET i.institution_name = ?, i.address = ?, i.contact_person = ?, i.contact_number = ?, i.institution_status = ?, i.delete_marker = ?, i.updated_by = ? WHERE i.institution_id = ?
UPDATE_TERMS_N_CONDITIONS_ON_ID=UPDATE terms_n_conditions tnc SET tnc.updated_by = ?, tnc.tnc_status = ?, tnc.delete_marker = ?, tnc.tnc_text = ? WHERE tnc.tnc_id = ?
UPDATE_IS_TNC_ACCEPTED_IN_ADMINS=UPDATE admins a SET a.is_tnc_accepted = 'N', a.updated_by = ?
UPDATE_PWD_POLICY_ON_ID= UPDATE pwd_policy_mgmt ppm SET ppm.institution_id = ?, ppm.pwd_rotation_in_days = ?, ppm.pwd_min_length = ?, ppm.pwd_max_length = ?, ppm.is_caps_allowed = ?, ppm.is_lower_allowed = ?, ppm.is_numeric_allowed = ?, ppm.is_spl_char_allowed = ?, ppm.retry_login_attempts_allowed = ?, ppm.pwd_history = ?, ppm.prohibited_passwords = ?, ppm.pwd_policy_status = ?, ppm.delete_marker = ?, ppm.updated_by = ? WHERE ppm.pwd_policy_id = ?
UPDATE_INSTITUTION_FOR_PWD_EXPIRE_IN_DAYS=UPDATE institution i SET i.pwd_expire_in_days = ?, i.updated_by = ? WHERE i.institution_id = ?
UPDATE_DATA_ARCHIVAL_POLICY_ON_ID=UPDATE data_archival_policy_mgmt dapm SET dapm.institution_id = ?, dapm.archival_period_in_months = ?, dapm.auto_archival_frequency = ?, dapm.auto_log_off_time_in_minutes = ?, dapm.duration_to_store_audit_logs_in_months = ?, dapm.data_archival_policy_status = ?, dapm.delete_marker = ?, dapm.updated_by = ? WHERE dapm.data_archival_policy_id = ?
UPDATE_IS_TNC_ACCEPTED_IN_ADMINS_BY_EMAIL_ID=UPDATE admins a SET a.is_tnc_accepted = 'Y', a.updated_by = ? WHERE a.email_id = ?
UPDATE_PWD_UPDATED_DATE_IN_ADMINS_BY_EMAIL_ID=UPDATE admins a SET a.pwd_updated_date = CURDATE(), a.updated_by = ? WHERE a.email_id = ?
UPDATE_PATIENT_THRESHOLD=UPDATE patient_threshold SET threshold_values=?, updated_by = ? WHERE patient_id =?
UPDATE_DEVICE_READING_STATUS_IN_DEVICE_DATA=UPDATE device_data dd SET dd.status = 'I', dd.updated_by = ? WHERE dd.pk_id = ?
UPDATE_PATIENT_THRESHOLD=UPDATE patient_threshold SET threshold_values=?, updated_by = ? WHERE patient_id =?
UPDATE_BASELINE_STATUS_OF_DEVICE_READING_TO_TRUE=UPDATE device_data dd SET dd.is_baseline_reading = true, dd.updated_by = ? WHERE dd.pk_id = ?
UPDATE_BASELINE_STATUS_OF_DEVICE_READING_TO_FALSE=UPDATE device_data dd SET dd.is_baseline_reading = false, dd.updated_by = ? WHERE dd.chf_patient_id IN (SELECT * FROM (SELECT chf_patient_id FROM device_data WHERE pk_id = ?) AS temp)
UPDATE_IS_ACTIVE_ON_ALERT_DATA_BY_PATIENT_ID=UPDATE alert_data_new ad JOIN device_data dd ON dd.msg_id = ad.msg_id SET ad.is_active = FALSE  WHERE dd.patient_id = ?
UPDATE_PATIENT_VITALS_ON_PATIENT_VITALS_ID=UPDATE patient_vitals pv SET pv.systolic_bp = ?, pv.diastolic_bp = ?, pv.weight = ?, pv.reading_date=?, pv.temperature = ? ,pv.custom_vitals = ?, pv.updated_by = ? WHERE pv.patient_vitals_id = ?
RESTORE_DEFAULT_THRESHOLD_ON_PATIENT_ID=UPDATE patient_threshold SET threshold_values =  (SELECT tp.threshold_policy FROM threshold_policy tp LEFT JOIN patient_phi pp ON pp.institution_id = tp.institution_id WHERE pp.patient_id = ?) WHERE patient_id = ?
UPDATE_IS_ACTIVE_ON_THRESHOLD_BREACH_COUNT_BY_PATIENT_ID=UPDATE threshold_breach_data tbd JOIN device_data dd ON dd.measurement_id = tbd.measurement_id SET tbd.is_active = false  WHERE dd.chf_patient_id = (Select chf_patient_id from patient_phi where patient_id = ?)
UPDATE_THRESHOLD_POLICY_BY_INSTITUTION_ID=UPDATE threshold_policy SET threshold_policy=?, updated_by = ? WHERE institution_id =?
UPDATE_THRESHOLD_POLICY_STATUS_BY_INSTITUTION_ID=UPDATE threshold_policy SET status=?, updated_by = ? WHERE institution_id =?
UPDATE_HEALTHCARE_PROVIDER_BY_PROVIDER_ID=UPDATE healthcare_provider SET  provider_name=?, hospital_affilation = ?, doctor_name=?, doctor_contact_no=?, doctor_email=?, other_contact_number=?, updated_by = ? WHERE  provider_id =?
UPDATE_CLINICIAN_ON_ID=UPDATE clinician c SET c.institution_id = ?, c.first_name = ?, c.last_name = ?, c.employee_id = ?, c.pool_id = ?, c.status = ?, c.type = ?, c.portal_access = ?, c.location = ?, c.delete_marker = ?, c.updated_by = ? WHERE c.clinician_id = ?
UPDATE_CLINICIAN_PROFILE_ON_EMAIL_ID=UPDATE clinician c SET c.first_name = ?, c.last_name = ?, c.locale = ?, c.timezone = ?, c.updated_by = ? WHERE c.email_id = ?
DEACTIVATE_CLINICIAN_ON_INSTITUTION_ID=UPDATE clinician c SET c.status = 'II', c.updated_by = ? WHERE c.institution_id = ? AND c.status = 'A'
ACTIVATE_CLINICIAN_ON_INSTITUTION_ID=UPDATE clinician c SET c.status = 'A', c.retry_login_attempt_counter = 0, c.updated_by = ? WHERE c.institution_id = ? AND c.status = 'II'
DELETE_CLINICIAN_ON_INSTITUTION_ID=UPDATE clinician c SET c.delete_marker = 'Y', c.updated_by = ? WHERE c.institution_id = ?
UPDATE_PWD_UPDATED_DATE_IN_CLINICIAN_BY_EMAIL_ID=UPDATE clinician c SET c.pwd_updated_date = CURDATE(), c.updated_by = ? WHERE c.email_id = ?
UPDATE_IS_TNC_ACCEPTED_IN_CLINICIAN_BY_EMAIL_ID=UPDATE clinician c SET c.is_tnc_accepted = 'Y', c.updated_by = ? WHERE c.email_id = ?
UPDATE_IS_TNC_ACCEPTED_IN_CLINICIAN=UPDATE clinician c SET c.is_tnc_accepted = 'N', c.updated_by = ?
BLOCK_CLINICIAN_BY_EMAIL_ID=UPDATE clinician c SET c.status = 'LI', c.retry_login_attempt_counter = c.retry_login_attempt_counter + 1, c.updated_by = ? WHERE c.email_id = ? AND c.status = 'A'
UNBLOCK_CLINICIAN_BY_EMAIL_ID=UPDATE clinician c SET c.status = 'A', c.retry_login_attempt_counter = 0, c.updated_by = ? WHERE c.email_id = ? AND c.status = 'LI'
UPDATE_CLINICIAN_FOR_FAILURE_LOGIN_ACTIVITY=UPDATE clinician c SET c.retry_login_attempt_counter = c.retry_login_attempt_counter + 1, c.updated_by = ? WHERE c.email_id = ?
UPDATE_CLINICIAN_FOR_SUCCESS_LOGIN_ACTIVITY=UPDATE clinician c SET c.retry_login_attempt_counter = 0, c.last_login_timestamp = CURRENT_TIMESTAMP(), c.updated_by = ? WHERE c.email_id = ?
UPDATE_SYSTEM_ID_IN_PATIENT_THRESHOLD=UPDATE patient_threshold SET system_id = ?, updated_by = ? WHERE patient_id = (SELECT patient_id FROM patient_phi WHERE chf_patient_id = ?)
DEENROLL_PATIENT_BY_CHF_PATIENT_ID=UPDATE patient_phi SET delete_marker = 'Y', updated_by = ? WHERE chf_patient_id = ?

UPDATE_ADMINS_FOR_FAILURE_LOGIN_ACTIVITY=UPDATE admins a SET a.retry_login_attempt_counter = a.retry_login_attempt_counter + 1, a.updated_by = ? WHERE a.email_id = ?
UPDATE_ADMINS_FOR_SUCCESS_LOGIN_ACTIVITY=UPDATE admins a SET a.retry_login_attempt_counter = 0, a.last_login_timestamp = CURRENT_TIMESTAMP(), a.updated_by = ? WHERE a.email_id = ?
BLOCK_ADMIN_BY_EMAIL_ID=UPDATE admins a SET a.status = 'LI', a.retry_login_attempt_counter = a.retry_login_attempt_counter + 1, a.updated_by = ? WHERE a.email_id = ? AND a.status = 'A'
SELECT_REMAINING_LOGIN_ATTEMPTS_FROM_ADMINS_AND_PWD_POLICY_TABLE_ON_EMAIL_ID=SELECT (ppm.retry_login_attempts_allowed - a.retry_login_attempt_counter) AS remaining_login_attempts FROM pwd_policy_mgmt ppm, admins a WHERE a.institution_id = ppm.institution_id AND a.email_id = ?
SELECT_ADMINS_LIST_TO_UNBLOCK = SELECT a.* FROM admins a WHERE (a.updated_timestamp <= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 HOUR) AND a.status = 'LI')
UNBLOCK_ADMIN_BY_EMAIL_ID=UPDATE admins a SET a.status = 'A', a.retry_login_attempt_counter = 0, a.updated_by = ? WHERE a.email_id = ? AND a.status = 'LI'

COUNT_NO_OF_PATIENTS_BASED_ON_INSTITUTION_ID=SELECT COUNT(pp.patient_id) AS patient_count FROM patient_phi pp WHERE pp.institution_id = ?

SELECT_DERIVED_DATA_BY_PATIENT_ID_AND_DATE_FILTER=SELECT alertd.threshold_breach_id as alert_data_id, alertd.measurement_id as msg_id, JSON_UNQUOTE(json_extract(alertd.threshold_breach_data,'$.breachNotification')) as breach_param, alertd.is_active, device.reading_date, device.is_baseline_reading, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position1TidalVolume')) as supine_tidal_vol, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position1RespirationRate')) as supine_respiration_rate, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position1RRTV')) as supine_rr_tv, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position2TidalVolume')) as fowler_tidal_vol, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position2RespirationRate')) as fowler_respiration_rate, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position2RRTV')) as fowler_rr_tv, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.deltaZ')) as delta_z, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.averageS3Energy')) as s3_energy, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.medianThoracicImpedance')) as thoracic_impedance, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.HR')) as heart_rate FROM derived_data derived inner join device_data device on  derived.measurement_id = device.measurement_id AND device.status='A' left join threshold_breach_data alertd on alertd.measurement_id = device.measurement_id AND alertd.is_active = true AND device.status='A' WHERE device.chf_patient_id = (select chf_patient_id from patient_phi where patient_id=?) AND DATE(device.reading_date) >= ? AND DATE(device.reading_date) <= ? ORDER BY device.reading_date
SELECT_DERIVED_DATA_BY_PATIENT_ID=SELECT alertd.threshold_breach_id as alert_data_id, alertd.measurement_id as msg_id, JSON_UNQUOTE(json_extract(alertd.threshold_breach_data,'$.breachNotification')) as breach_param, alertd.is_active, device.reading_date, device.is_baseline_reading, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position1TidalVolume')) as supine_tidal_vol, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position1RespirationRate')) as supine_respiration_rate, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position1RRTV')) as supine_rr_tv, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position2TidalVolume')) as fowler_tidal_vol, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position2RespirationRate')) as fowler_respiration_rate, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.position2RRTV')) as fowler_rr_tv, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.deltaZ')) as delta_z, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.averageS3Energy')) as s3_energy, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.medianThoracicImpedance')) as thoracic_impedance, JSON_UNQUOTE(json_extract(derived.derived_data,'$.derivedParameters.HR')) as heart_rate FROM derived_data derived inner join device_data device on  derived.measurement_id = device.measurement_id AND device.status='A' left join threshold_breach_data alertd on alertd.measurement_id = device.measurement_id AND alertd.is_active = true AND device.status='A' WHERE device.chf_patient_id = (select chf_patient_id from patient_phi where patient_id=?) ORDER BY device.reading_date

#Queries used in sandeep s code
SELECT_PATIENT_RECORD_BY_INSTITUTION=SELECT pp.patient_id as patient_id, pp.chf_patient_id as chf_patient_id,pp.institution_id as institution_id, ddc.lastread, JSON_UNQUOTE(json_extract(drd.derived_data,'$.derivedParameters.HR')) as heart_rate, JSON_UNQUOTE(json_extract(drd.derived_data,'$.trends.HRtrend')) as heart_rate_trend,JSON_UNQUOTE(json_extract(drd.derived_data,'$.trends.QTtrend')) as qt_trend, JSON_UNQUOTE(json_extract(drd.derived_data,'$.derivedParameters.qtWidth')) as qt_width, JSON_UNQUOTE(json_extract(drd.derived_data,'$.trends.QRStrend')) as qrs_trend, JSON_UNQUOTE(json_extract(drd.derived_data,'$.derivedParameters.qrsWidth')) as qrs_width, JSON_UNQUOTE(json_extract(drd.derived_data,'$.derivedParameters.position1RespirationRate')) as respiration_rate, JSON_UNQUOTE(json_extract(drd.derived_data,'$.trends.RRtrend')) as respiration_rate_trend, JSON_UNQUOTE(json_extract(drd.derived_data,'$.derivedParameters.abnormalRhythm')) as abnormal_rhythm,JSON_UNQUOTE(json_extract(drd.derived_data,'$.trends.S3trend')) as s3_trend, JSON_UNQUOTE(json_extract(drd.derived_data,'$.trends.TVtrend')) as tidal_vol_trend, JSON_UNQUOTE(json_extract(drd.derived_data,'$.trends.TItrend')) as thoracic_impedance_trend, JSON_UNQUOTE(pc.daily_compliance) as daily_compliance,pc.compliance as reading_compliance, pc.percentage, pc.system_id,\
CASE WHEN ((SELECT COUNT(1) FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id  > 0) and (select count(1) from threshold_breach_data tbd where tbd.system_id=dd.system_id > 0 and tbd.is_active) and (SELECT json_extract(pt.threshold_values,'$[*].controls[*].unitValue') REGEXP '[0-9]' as isNumeric FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id >0)) THEN '2'\
WHEN ((SELECT COUNT(1) FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id > 0) and (SELECT json_extract(pt.threshold_values,'$[*].controls[*].unitValue') REGEXP '[0-9]' as isNumeric FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id >0)) THEN '1' WHEN ((SELECT COUNT(1) FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id < 1) \
|| (SELECT json_extract(pt.threshold_values,'$[*].controls[*].unitValue') REGEXP '[0-9]' as isNumeric FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id <1))  THEN '0' END AS threshold_alarm, dd.measurement_id as measurement_id from patient_phi pp left join\
(SELECT chf_patient_id, max(reading_date) as lastread FROM device_data GROUP BY chf_patient_id) as ddc on pp.chf_patient_id=ddc.chf_patient_id left join (select system_id,measurement_id,reading_date from device_data) dd on dd.reading_date = ddc.lastread left join derived_data drd on dd.measurement_id=drd.measurement_id left join (SELECT system_id,daily_compliance,compliance, percentage from patient_compliance group by system_id ORDER BY created_timestamp DESC ) pc on pc.system_id=dd.system_id where pp.institution_id = ? 

SELECT_PATIENT_RECORD_BY_INSTITUTION_AND_PATIENTCON =  and dd.chf_patient_id = '
#'
SELECT_PATIENT_RECORD_BY_INSTITUTION_AND_TH_CON =  and (SELECT COUNT(1) FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id > 0) and (SELECT json_extract(pt.threshold_values,'$[*].controls[*].unitValue') REGEXP '[0-9]' as isNumeric FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id >0)
SELECT_PATIENT_RECORD_BY_INSTITUTION_AND_PATIENT_ACTIONS_CON = and ((SELECT COUNT(*) FROM patient_actions pac WHERE pac.STATUS='OPEN' AND pac.patient_id=pp.patient_id ) >0)
SELECT_PATIENT_RECORD_BY_INSTITUTION_AND_PATIENT_LASTTHREE_CON = and  dd.created_timestamp >= ( CURDATE() - INTERVAL 3 DAY )
SELECT_PATIENT_RECORD_BY_INSTITUTION_AND_PATIENT_WL_CON = and pp.chf_patient_id in (select ppt.chf_patient_id from patient_phi ppt inner join patient_clinician_mapping pcmt on ppt.patient_id=pcmt.patient_id and pcmt.clinician_id =  
SELECT_PATINET_TOP_COUNT_WATCHLIST = SELECT 'watchlist', count(DISTINCT pp.patient_id)  from  patient_phi pp left join device_data dd on pp.chf_patient_id=dd.chf_patient_id inner join patient_clinician_mapping pcm on pp.patient_id=pcm.patient_id where pp.institution_id = ? AND pcm.clinician_id= ?
SELECT_PATIENT_RECORD_BY_INSTITUTION_GROUP_ORDER_BY= GROUP BY patient_id order by lastread desc 

#Query for Patient clinician  dashboard
SELCT_COMPLIANCE_PERIOD_BY_INSTITUTION_ID = SELECT compliance_period FROM compliance_settings WHERE institution_id= ? AND STATUS=1
SELECT_PATINET_TOP_COUNT_THRESHOLDALARM=SELECT 'thresholdAlarm', count(DISTINCT pp.patient_id) from patient_phi pp left join device_data dd on dd.chf_patient_id=pp.chf_patient_id left join patient_threshold pt on pt.patient_id=pp.patient_id where (SELECT json_extract(pt.threshold_values,'$[*].controls[*].unitValue') REGEXP '[0-9]' as isNumeric FROM patient_threshold pt WHERE pt.patient_id=pp.patient_id >0) and pp.institution_id = ?
SELECT_PATINET_TOP_COUNT_LASTTHREEDAYS=SELECT 'lastThreeday', count(DISTINCT pp.patient_id) from patient_phi pp left join device_data dd on dd.chf_patient_id=pp.chf_patient_id WHERE  dd.created_timestamp >= ( CURDATE() - INTERVAL 3 DAY ) and pp.institution_id = ?
SELECT_PATINET_TOP_COUNT_PATIENTACTION=SELECT 'patientActions', count(DISTINCT pp.patient_id) from patient_phi pp left join device_data dd on dd.chf_patient_id=pp.chf_patient_id where ((SELECT COUNT(*) FROM patient_actions pac WHERE pac.STATUS='OPEN' AND pac.patient_id=pp.patient_id ) >0) and pp.institution_id = ?
REMOVE_PATIENT_PROVIDER_MAPPING=UPDATE patient_provider_mapping SET delete_marker =  'Y', updated_by = ? where provider_id = ? AND chf_patient_id = ?

#Query For compliance_settings
UPDATE_COMPLIANCE_POLICY_ON_ID=UPDATE compliance_settings policy SET policy.updated_by = ?, policy.compliance_period = ? WHERE policy.pk_id = ?
INSERT_INTO_COMPLIANCE_POLICY=INSERT INTO compliance_settings(institution_id,compliance_period,status,created_by,updated_by) VALUES(?,?,?,?,?)
SELECT_FROM_COMPLIANCE_POLICY_BY_INSTITUTION_ID=SELECT * FROM compliance_settings policy WHERE policy.institution_id = ?

UPDATE_PATIENT_ACTION_AS_CLOSED=UPDATE patient_actions pa SET pa.status = 'CLOSED', pa.updated_by = ? WHERE pa.action_id = ?
UPDATE_IS_ACTION_OPEN_AS_FALSE_IN_PATIENT_PHI=UPDATE patient_phi phi SET phi.is_action_open = 0, phi.updated_by = ? WHERE phi.patient_id = ? AND 0 = (SELECT COUNT(*) FROM patient_actions pa WHERE pa.patient_id = ? AND pa.status = 'OPEN')
INSERT_INTO_PATIENT_ACTIONS=INSERT INTO patient_actions(patient_id,priority,due_date,subject,details,created_by,updated_by) VALUES(?,?,?,?,?,?,?)
UPDATE_IS_ACTION_OPEN_AS_TRUE_IN_PATIENT_PHI=UPDATE patient_phi phi SET phi.is_action_open = 1, phi.updated_by = ? WHERE phi.patient_id = ?
INSERT_INTO_PATIENT_ACTION_COMMENTS=INSERT INTO patient_action_comments(action_id,comments,created_by) values(?,?,?)
INSERT_INTO_CLINICIAN_COMMENTS=INSERT INTO clinician_comments(patient_id,comment,created_by) VALUES(?,?,?)
UPDATE_PATIENT_MASTER_OTHER_MAPPING = {call updatePatientMasterOtherMapping(?,?,?,?,?,?,?)}

SELECT_PATIENT_MASTER_OTHER_MAPPING_DETAILS = SELECT "M" AS data_type, md.master_type_code, md.id AS master_other_id, md.key_value AS label_text, pm.id as mapping_id FROM patient_info_master md LEFT JOIN  patient_master_mapping pm  ON pm.master_id = md.id and pm.patient_id = ? AND pm.delete_marker = 'N' where md.master_type_code  IN (REPLACE_AREA) UNION SELECT "O" AS DATA_TYPE, pmo.master_type_code, pmo.id AS master_id, pmo.label_text, NULL AS mapping_id from patient_master_other_mapping pmo WHERE pmo.patient_id = ? AND pmo.delete_marker = 'N' AND pmo.master_type_code IN (REPLACE_AREA)
SELECT_FROM_CLINICIAN_COMMENTS_BY_PATIENT_ID=SELECT cm.* FROM clinician_comments cm WHERE cm.patient_id = ? ORDER BY created_timestamp desc
SELECT_FROM_CLINICIAN_COMMENTS_BY_COMMENT_ID=SELECT cm.* FROM clinician_comments cm WHERE cm.comment_id = ?
SELECT_FROM_PATIENT_ACTION_COMMENTS_BY_COMMENT_ID=SELECT pc.comment_id, pc.action_id, pc.comments, pc.created_by AS com_created_by, pc.created_timestamp AS com_created_timestamp FROM patient_action_comments pc WHERE pc.comment_id = ?
SELECT_FROM_PATIENT_ACTIONS_BY_ACTION_ID=SELECT pa.* FROM patient_actions pa WHERE pa.action_id = ?
SELECT_FROM_PATIENT_ACTIONS_AND_COMMENTS=SELECT pa.*, pc.comment_id, pc.comments, pc.created_by AS com_created_by, pc.created_timestamp AS com_created_timestamp FROM patient_actions pa LEFT JOIN patient_action_comments pc ON pc.action_id=pa.action_id WHERE pa.patient_id = ? ORDER BY pa.action_id desc

SELECT_FROM_PATIENT_PHI_BASED_ON_INSTITUTION_ID_SEARCH=SELECT pp.patient_id, pp.chf_patient_id, pp.mr_no, pp.gender, pp.first_name, pp.last_name, pp.contact_no, pp.dob FROM patient_phi pp WHERE REPLACEAREA AND pp.institution_id = ? AND delete_marker = 'N' ORDER BY patient_id LIMIT ?, ?

IS_ADMIN_AVILABLE = SELECT admin_id FROM admins where email_id = ?
IS_CLINICIAN_AVILABLE = SELECT clinician_id FROM clinician where email_id = ?

# Org Enrollment Started
SELECT_FROM_ORGANIZATION=SELECT * FROM organization i WHERE i.delete_marker != 'Y' AND i.organization_id != 0 ORDER BY i.created_timestamp desc
SELECT_ALL_ACTIVATED_ORGANIZATION_FROM_ORGANIZATION=SELECT * FROM organization i WHERE i.organization_status = 'A' AND i.delete_marker != 'Y' AND i.organization_id != 0
SELECT_ORGANIZATION_ITS_PWD_POLICY_ITS_DATA_ARCHIVAL_POLICY_AND_ITS_TNC_BY_ORGANIZATION_ID=SELECT i.*, ppm.pwd_policy_id, ppm.pwd_rotation_in_days, ppm.pwd_min_length, ppm.pwd_max_length, ppm.is_caps_allowed, ppm.is_lower_allowed, ppm.is_numeric_allowed, ppm.is_spl_char_allowed, ppm.retry_login_attempts_allowed, ppm.pwd_history, ppm.prohibited_passwords, ppm.pwd_policy_status, ppm.delete_marker AS pwd_policy_delete_marker, ppm.created_by AS pwd_policy_created_by, ppm.created_timestamp AS pwd_policy_created_timestamp, ppm.updated_by AS pwd_policy_updated_by, ppm.updated_timestamp AS pwd_policy_updated_timestamp, tnc.tnc_id, tnc.created_by AS tnc_created_by, tnc.created_timestamp AS tnc_created_timestamp, tnc.updated_by AS tnc_updated_by, tnc.updated_timestamp AS tnc_updated_timestamp, tnc.tnc_status, tnc.delete_marker AS tnc_delete_marker, tnc.tnc_text, dapm.data_archival_policy_id, dapm.archival_period_in_months, dapm.auto_archival_frequency, dapm.auto_log_off_time_in_minutes, dapm.duration_to_store_audit_logs_in_months, dapm.data_archival_policy_status, dapm.delete_marker AS data_archival_policy_delete_marker, dapm.created_by AS data_archival_policy_created_by, dapm.created_timestamp AS data_archival_policy_created_timestamp, dapm.updated_by AS data_archival_policy_updated_by, dapm.updated_timestamp AS data_archival_policy_updated_timestamp FROM organization i LEFT JOIN pwd_policy_mgmt ppm ON (ppm.institution_id = i.organization_id AND ppm.pwd_policy_status = 'A' AND ppm.delete_marker != 'Y') LEFT JOIN terms_n_conditions tnc ON (tnc.institution_id = 0 AND tnc.tnc_status = 'A' AND tnc.delete_marker != 'Y') LEFT JOIN data_archival_policy_mgmt dapm ON (dapm.institution_id = i.organization_id AND dapm.data_archival_policy_status = 'A' AND dapm.delete_marker != 'Y') WHERE i.organization_id = ? AND i.delete_marker != 'Y'
UPDATE_ORGANIZATION_ON_ID=UPDATE organization i SET i.organization_name = ?, i.address = ?, i.contact_person = ?, i.contact_number = ?, i.organization_status = ?, i.delete_marker = ?, i.updated_by = ? WHERE i.organization_id = ?
UPDATE_ORGANIZATION_FOR_PWD_EXPIRE_IN_DAYS=UPDATE organization i SET i.pwd_expire_in_days = ?, i.updated_by = ? WHERE i.organization_id = ?
INSERT_INTO_ORGANIZATION=INSERT INTO organization(organization_name,address,contact_person,contact_number,organization_type,organization_sub_type,created_by,updated_by) VALUES(?,?,?,?,?,?,?,?)
SELECT_FROM_ORGANIZATION_BY_ORGANIZATION_NAME=SELECT * FROM organization i WHERE i.organization_name = ? AND i.delete_marker != 'Y'
SELECT_FROM_ORGANIZATION_BY_ORGANIZATION_TYPE=SELECT * FROM organization i WHERE i.organization_type = ? AND i.delete_marker != 'Y'
INSERT_INTO_ORG_PP_MAP=INSERT INTO organization_partner_provider_mapping(organization_id,partner_provider_id,created_by,updated_by) VALUES(?,?,?,?)
# End

COUNT_NO_OF_SEARCHD_PATIENTS_BASED_ON_INSTITUTION_ID=SELECT COUNT(pp.patient_id) AS patient_count FROM patient_phi pp WHERE REPLACEAREA AND pp.institution_id = ? AND delete_marker = 'N'

#Queries related to Bulk patient upload
INSERT_INTO_PATIENT_PHI_BULK=INSERT INTO patient_phi(chf_patient_id,institution_id,created_by,updated_by,first_name,last_name,gender,contact_no,dob,ssn,patient_details_json) VALUES(?,?,?,?,?,?,?,?,?,?,?)
SELECT_PATINET_CHF_ID_LIST = SELECT chf_patient_id from patient_phi where institution_id = ?
SELECT_DUPLICATE_PATINET_COUNT = SELECT COUNT(*)  AS patient_count FROM patient_phi WHERE gender = ? AND first_name = ? AND last_name = ? AND dob = ? AND contact_no = ? AND ssn = ?

